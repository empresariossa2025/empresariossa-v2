generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  cpf           String?   @unique
  cnpj          String?   @unique
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  organizations OrganizationMember[]
  contracts     Contract[]
  charges       Charge[]
  events        EventAttendee[]
  classes       ClassEnrollment[]
  comments      ClassComment[]
  documents     Document[]
  memberPoints  MemberPoints?
  pointTransactions PointTransaction[]
  memberMetrics MemberMetrics?
  meetings      Meeting[]
  memberVisits  MemberVisit[]
  recommendations Recommendation[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  email     String
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  members   OrganizationMember[]
  contracts Contract[]
  branches  Branch[]
}

model OrganizationMember {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           MemberRole   @default(MEMBER)
  joinedAt       DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@unique([userId, organizationId])
}

model Branch {
  id             String       @id @default(uuid())
  organizationId String
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  createdAt      DateTime     @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Contract {
  id             String         @id @default(uuid())
  organizationId String
  userId         String
  number         String         @unique
  status         ContractStatus @default(DRAFT)
  startDate      DateTime
  endDate        DateTime?
  value          Decimal        @db.Decimal(10,2)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  organization   Organization   @relation(fields: [organizationId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  charges        Charge[]
}

model Charge {
  id         String       @id @default(uuid())
  contractId String
  userId     String
  amount     Decimal      @db.Decimal(10,2)
  dueDate    DateTime
  paidAt     DateTime?
  status     ChargeStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  
  contract   Contract     @relation(fields: [contractId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

model Event {
  id          String          @id @default(uuid())
  title       String
  description String?
  metadata     Json?
  startDate   DateTime
  endDate     DateTime
  location    String?
  capacity    Int?
  createdAt   DateTime        @default(now())
  
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  status    AttendeeStatus @default(REGISTERED)
  createdAt DateTime @default(now())
  
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
}

model Class {
  id          String            @id @default(uuid())
  title       String
  description String?
  metadata     Json?
  content     String?
  videoUrl    String?
  duration    Int?
  createdAt   DateTime          @default(now())
  
  enrollments ClassEnrollment[]
  comments    ClassComment[]
}

model ClassEnrollment {
  id         String   @id @default(uuid())
  classId    String
  userId     String
  progress   Int      @default(0)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  
  class      Class    @relation(fields: [classId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@unique([classId, userId])
}

model ClassComment {
  id        String   @id @default(uuid())
  classId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  
  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Document {
  id        String   @id @default(uuid())
  userId    String
  fileName  String
  fileKey   String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum ContractStatus {
  DRAFT
  ACTIVE
  SUSPENDED
  CANCELLED
  COMPLETED
}

enum ChargeStatus {
  PENDING
  PROCESSING
  PAID
  CANCELLED
  REFUNDED
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  CANCELLED
}

enum PointCategory {
  ATTENDANCE
  MEETING
  VISITOR
  RECOMMENDATION
  BUSINESS_DEAL
}

enum PointTransactionType {
  EARNED
  PENALTY
  BONUS
}

model MemberPoints {
  id           String @id @default(uuid())
  memberId     String
  totalPoints  Int    @default(0)
  monthlyPoints Int   @default(0)
  yearlyPoints  Int    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  member       User @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@unique([memberId])
  @@map("member_points")
}

model PointTransaction {
  id          String              @id @default(uuid())
  memberId    String
  points      Int
  category    PointCategory
  type        PointTransactionType
  description String?
  metadata     Json?
  createdAt   DateTime            @default(now())
  
  member      User                @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("point_transactions")
}

model Meeting {
  id          String   @id @default(uuid())
  memberId    String
  date        DateTime
  type        String?
  notes       String?
  createdAt   DateTime @default(now())
  
  member      User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("meetings")
}

model MemberVisit {
  id          String   @id @default(uuid())
  memberId    String
  visitorName String
  visitDate   DateTime
  notes       String?
  createdAt   DateTime @default(now())
  
  member      User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("member_visits")
}

model Recommendation {
  id          String    @id @default(uuid())
  memberId    String
  recommendedName  String
  recommendedEmail String?
  status      String    @default("PENDING")
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
  
  member      User      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("recommendations")
}



model PointRule {
  id          String   @id @default(uuid())
  name        String
  minimal     String?
  type        Int      @default(2)
  items       Int      @default(1) 
  points      Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  @@map("point_rules")
}

model MemberMetrics {
  id          String   @id @default(uuid())
  memberId    String   @unique
  eventsAttended    Int @default(0)
  meetingsHeld      Int @default(0)
  visitorsReferred  Int @default(0)
  recommendationsMade Int @default(0)
  recommendationsClosed Int @default(0)
  lastUpdated  DateTime @default(now())
  
  member       User     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@map("member_metrics")
}
