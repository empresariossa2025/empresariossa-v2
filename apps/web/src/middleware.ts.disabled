import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// Define protected routes and their required roles
const ROUTE_PERMISSIONS = {
  '/admin': ['SUPER_ADMIN', 'ADMIN', 'ADMINISTRATIVO'],
  '/member': ['MEMBRO'],
  '/demo': ['GUEST', 'VISITANTE'],
} as const;

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // Skip middleware for public routes
  if (
    pathname.startsWith('/login') ||
    pathname.startsWith('/api') ||
    pathname.startsWith('/_next') ||
    pathname.startsWith('/favicon.ico')
  ) {
    return NextResponse.next();
  }

  // Get token from request (could be from cookie or header)
  const token = request.cookies.get('token')?.value || 
                request.headers.get('authorization')?.replace('Bearer ', '');

  // If no token, redirect to login
  if (!token) {
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }

  // For now, we'll let the client-side auth context handle role validation
  // since we need to decode JWT and verify role, which is complex in middleware
  // The client-side will handle the proper redirects after user data is loaded
  
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - api (API routes)
     * - login (public login page)
     */
    '/((?!_next/static|_next/image|favicon.ico|api|login).*)',
  ],
};
